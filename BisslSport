-- // Execution Count & Announce \\ //

local url = "https://novadashb.xyz/executionsNovaExecutions2"

local function makeHttpRequest()
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    
    if success then
        local jsonSuccess, jsonData = pcall(function()
            return game:GetService("HttpService"):JSONDecode(response)
        end)
        
        if jsonSuccess then
            return jsonData
        else
            return response
        end
    else
        return nil
    end
end

makeHttpRequest()

-- loadstring announcements

-- // Script \\ --

if game.PlaceId == 7711635737 then

task.wait(1)

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/1nig1htmare1234/SCRIPTS/refs/heads/main/Orion.lua')))()
local Window = OrionLib:MakeWindow({
        Name = "QuantumHub",
        HidePremium = false,
        SaveConfig = false,
        IntroText = "Quantum | V1.9 - by nytheron",
})


-- // Creating Tabs \\ --
local InformationTab = Window:MakeTab({
    Name = "Infos",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AimbotTab = Window:MakeTab({
    Name = "Aimbot",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local SilentAimTab = Window:MakeTab({
	Name = "SilentAim",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local VisualsTab = Window:MakeTab({
	Name = "Visuals",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local VehicleTab = Window:MakeTab({
	Name = "Vehicle",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local TeleportsTab = Window:MakeTab({
	Name = "Teleports",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local PoliceTab = Window:MakeTab({
	Name = "Police",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local MiscTab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local InfoTab = Window:MakeTab({
    Name = "Server-Info",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutoFarmTab = Window:MakeTab({
    Name = "AutoFarm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutoRobTab = Window:MakeTab({
    Name = "AutoRob",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local VoiceChatTab = Window:MakeTab({
    Name = "Voice Chat",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local CreditsTab = Window:MakeTab({
    Name = "Credits",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- // Creating Sections \\ --
local Section = InformationTab:AddSection({
    Name = "General"
})
local Section = AimbotTab:AddSection({
    Name = "Aimbot"
})
local Section = SilentAimTab:AddSection({
	Name = "SilentAim"
})
local Section = VisualsTab:AddSection({
	Name = "ESP"
})
local Section = VehicleTab:AddSection({
	Name = "Vehicle"
})
local Section = TeleportsTab:AddSection({
	Name = "Teleports"
})
local Section PoliceTab:AddSection({
	Name = "Police"
})
local Section = MiscTab:AddSection({
	Name = "Safety"
})
local Section = InfoTab:AddSection({
    Name = "Info"
})
local Section = AutoFarmTab:AddSection({
    Name = "Infos"
})
local Section = AutoRobTab:AddSection({
    Name = "AutoRob"
})
local Section = VoiceChatTab:AddSection({
    Name = "Voice Chat"
})

local Section = CreditsTab:AddSection({
    Name = "Credits"
})


-- // InformationTab \\ --

InformationTab:AddLabel('If you got the problem that nothing else than vehicle tab is\nloading, then wait till your car is spawned (example: in Prison)!')
InformationTab:AddLabel('So DONT open a ticket if this happens, only open a ticket if\nsingle tabs are not loading')
local Section = InformationTab:AddSection({
    Name = "Bugs & Discord"
})
InformationTab:AddLabel("If you find a Bug please record or screenshot it and check\nthe developer console (Phone -> Settings -> Dev-Console!")
InformationTab:AddLabel("Then go to our Discord Server and open a ticket to report\nthe bug! Discord below!")

InformationTab:AddButton({
        Name = "Copy Discord-Invite",
        Callback = function()
            setclipboard("https://discord.gg/9mFj4UMJPU")
            OrionLib:MakeNotification({
                Name = "Discord-link copied!",
                Content = "Paste the link into discord or browser!",
                Image = "rbxassetid://84828491431270",
                Time = 5
            })
        end
    })


-- // Variables \\ --

local boostAmount = 0
local player = game.Players.LocalPlayer
local LocalPlayer = game.Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local RunService = game:GetService("RunService")
local noclipEnabled = false
local noclipConnection
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local FlightSpeed = 100
local FlightAcceleration = 11
local SpeedKey = Enum.KeyCode.LeftControl
local SpeedKeyMultiplier = 13
local Flying = false
local FlightConnection = nil
local UserCharacter = nil
local UserRootPart = nil
local CurrentVelocity = Vector3.zero
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")


-- // Vehicle Tab \\ --

local function setCharacter(character)
	UserCharacter = character
	UserRootPart = character:WaitForChild("HumanoidRootPart")
end

LocalPlayer.CharacterAdded:Connect(setCharacter)
if LocalPlayer.Character then
	setCharacter(LocalPlayer.Character)
end

local function Flight(delta)
	local BaseVelocity = Vector3.zero
	if not UserInputService:GetFocusedTextBox() then
		if UserInputService:IsKeyDown(Enum.KeyCode.W) then
			BaseVelocity = Camera.CFrame.LookVector * FlightSpeed
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.S) then
			BaseVelocity = BaseVelocity - Camera.CFrame.LookVector * FlightSpeed
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.A) then
			BaseVelocity = BaseVelocity - Camera.CFrame.RightVector * FlightSpeed
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.D) then
			BaseVelocity = Camera.CFrame.RightVector * FlightSpeed
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.E) then
			BaseVelocity = Vector3.yAxis * FlightSpeed
		end
		if UserInputService:IsKeyDown(Enum.KeyCode.Q) then
			BaseVelocity = BaseVelocity - Vector3.yAxis * FlightSpeed
		end
		if UserInputService:IsKeyDown(SpeedKey) then
			BaseVelocity = BaseVelocity * SpeedKeyMultiplier
		end
	end



	if UserRootPart and not UserRootPart.Anchored then
		CurrentVelocity = CurrentVelocity:Lerp(BaseVelocity, math.clamp(delta * FlightAcceleration, 0, 1))
		UserRootPart.Velocity = CurrentVelocity + Vector3.new(0, 2, 0)
		UserRootPart.CFrame = CFrame.lookAt(UserRootPart.Position, UserRootPart.Position + Camera.CFrame.LookVector)
	end
end

local function ToggleFlight(enable)
	if enable then
		Flying = true
		FlightConnection = RunService.RenderStepped:Connect(Flight)
	else
		Flying = false
		if FlightConnection then
			FlightConnection:Disconnect()
			FlightConnection = nil
		end
	end
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if not gameProcessed and input.KeyCode == Enum.KeyCode.X then
		ToggleFlight(not Flying)
	end
end)
VehicleTab:AddLabel("Fly Kebind: X")
VehicleTab:AddToggle({
	Name = "CarFly",
	Default = false,
	Callback = function(Value)
    ToggleFlight(Value)
	end    
})

VehicleTab:AddToggle({
    Name = "Mobile CarFly",
    Default = false,
    Callback = function(Value)
        if Value then
            local Players = game:GetService("Players")
            local RunService = game:GetService("RunService")
            local Camera = workspace.CurrentCamera

            local LocalPlayer = Players.LocalPlayer
            local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

            -- UI erstellen
            local gui = Instance.new("ScreenGui")
            gui.Name = "MobileFlyUI"
            gui.Parent = PlayerGui
            gui.ResetOnSpawn = false

            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 200, 0, 120)
            frame.Position = UDim2.new(0.5, -100, 0.7, 0)
            frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
            frame.BackgroundTransparency = 0.1
            frame.BorderSizePixel = 0
            frame.Active = true
            frame.Draggable = true
            frame.AnchorPoint = Vector2.new(0.5, 0)
            frame.Parent = gui

            local UICorner = Instance.new("UICorner", frame)
            UICorner.CornerRadius = UDim.new(0, 8)

            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(0.9, 0, 0, 40)
            toggle.Position = UDim2.new(0.05, 0, 0, 5)
            toggle.Text = "CarFly: OFF"
            toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
            toggle.Font = Enum.Font.GothamSemibold
            toggle.TextSize = 18
            toggle.AutoButtonColor = false
            toggle.Parent = frame

            local UICorner2 = Instance.new("UICorner", toggle)
            UICorner2.CornerRadius = UDim.new(0, 6)

            local forwardBtn = Instance.new("TextButton")
            forwardBtn.Size = UDim2.new(0.42, 0, 0, 40)
            forwardBtn.Position = UDim2.new(0.05, 0, 0, 55)
            forwardBtn.Text = "â†‘"
            forwardBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            forwardBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            forwardBtn.Font = Enum.Font.GothamSemibold
            forwardBtn.TextSize = 16
            forwardBtn.AutoButtonColor = false
            forwardBtn.Parent = frame

            local UICorner3 = Instance.new("UICorner", forwardBtn)
            UICorner3.CornerRadius = UDim.new(0, 6)

            local backwardBtn = Instance.new("TextButton")
            backwardBtn.Size = UDim2.new(0.42, 0, 0, 40)
            backwardBtn.Position = UDim2.new(0.53, 0, 0, 55)
            backwardBtn.Text = "â†“"
            backwardBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            backwardBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            backwardBtn.Font = Enum.Font.GothamSemibold
            backwardBtn.TextSize = 16
            backwardBtn.AutoButtonColor = false
            backwardBtn.Parent = frame

			local UICorner3 = Instance.new("UICorner",backwardBtn)
            UICorner3.CornerRadius = UDim.new(0, 6)

            local function AddHoverEffect(button)
                button.MouseEnter:Connect(function()
                    button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                end)
                button.MouseLeave:Connect(function()
                    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                end)
            end

            AddHoverEffect(toggle)
            AddHoverEffect(forwardBtn)
            AddHoverEffect(backwardBtn)

            -- Fly Variablen
            local MobileFlying = false
            local FlightConnection
            local CurrentVelocity = Vector3.zero

            local movingForward = false
            local movingBackward = false

            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local hrp = character:WaitForChild("HumanoidRootPart")

            local function startFly()
                if MobileFlying then return end
                MobileFlying = true
                toggle.Text = "CarFly: ON"

                FlightConnection = RunService.RenderStepped:Connect(function(delta)
                    local BaseVelocity = Vector3.zero

                    if movingForward then
                        BaseVelocity = Camera.CFrame.LookVector * FlightSpeed
                    elseif movingBackward then
                        BaseVelocity = -Camera.CFrame.LookVector * FlightSpeed
                    end

                    CurrentVelocity = CurrentVelocity:Lerp(BaseVelocity, math.clamp(delta * FlightAcceleration, 0, 1))
                    hrp.Velocity = CurrentVelocity + Vector3.new(0, 2, 0)
                    hrp.CFrame = CFrame.lookAt(hrp.Position, hrp.Position + Camera.CFrame.LookVector)
                end)
            end

            local function stopFly()
                if not MobileFlying then return end
                MobileFlying = false
                toggle.Text = "CarFly: OFF"
                if FlightConnection then
                    FlightConnection:Disconnect()
                    FlightConnection = nil
                end
            end

            toggle.MouseButton1Click:Connect(function()
                if MobileFlying then
                    stopFly()
                else
                    startFly()
                end
            end)

            forwardBtn.MouseButton1Down:Connect(function()
                movingForward = true
            end)
            forwardBtn.MouseButton1Up:Connect(function()
                movingForward = false
            end)

            backwardBtn.MouseButton1Down:Connect(function()
                movingBackward = true
            end)
            backwardBtn.MouseButton1Up:Connect(function()
                movingBackward = false
            end)

        else
            local existingGui = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("MobileFlyUI")
            if existingGui then
                existingGui:Destroy()
            end
        end
    end
})


VehicleTab:AddSlider({
	Name = "Fly Speed",
	Min = 0,
	Max = 170,
	Default = FlightSpeed,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Speed",
	Callback = function(Value)
            FlightSpeed = Value
	end    
})

VehicleTab:AddButton({
	Name = "CarGod",
	Callback = function()
        local vehicleGodMode = true  
        local lastVehicle = nil
        
        
        local function updateVehicle()
            if not vehicleGodMode then return end
            if not lastVehicle or not lastVehicle.Parent then
                local vehiclesFolder = workspace:FindFirstChild("Vehicles")
                lastVehicle = vehiclesFolder and vehiclesFolder:FindFirstChild(player.Name) or nil
            end
        
            if lastVehicle then
                lastVehicle:SetAttribute("IsOn", true)
                lastVehicle:SetAttribute("currentHealth", 500)
                lastVehicle:SetAttribute("currentFuel", 45)
            end
        end
        
        RunService.Heartbeat:Connect(updateVehicle) 
  	end
})

VehicleTab:AddTextbox({
	Name = "NumberPlate Text:",
	Default = "",
	TextDisappear = false,
	Callback = function(inputText)
        local Vehicle = workspace.Vehicles:FindFirstChild(LocalPlayer.Name)

        if Vehicle and Vehicle:FindFirstChild("Body") then
            local licensePlates = Vehicle.Body:FindFirstChild("LicensePlates")
            if licensePlates then
                for _, side in ipairs({"Front", "Back"}) do
                    local plate = licensePlates:FindFirstChild(side)
                    if plate and plate:FindFirstChild("Gui") then
                        local gui = plate.Gui
                        if gui:FindFirstChild("TextLabel") then
                            gui.TextLabel.Text = inputText
                        else
                            warn("TextLabel not found in " .. side)
                        end
                    else
                        warn(side .. " license plate GUI not found")
                    end
                end
            else
                warn("LicensePlates not found")
            end
        else
            warn("Vehicle not found")
        end
	end
})

local function ensurePlayerInVehicle()
    local vehicle = workspace:FindFirstChild("Vehicles") and workspace.Vehicles:FindFirstChild(LocalPlayer.Name)

    if vehicle and character then
        local humanoid = character:FindFirstChildWhichIsA("Humanoid")
        local driveSeat = vehicle:FindFirstChild("DriveSeat")

        if humanoid and driveSeat and humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
        end
    end
end

VehicleTab:AddButton({
	Name = "Sit In Vehicle",
	Callback = function()
		ensurePlayerInVehicle()
  	end    
})

local Section = VehicleTab:AddSection({
	Name = "Tuning Mods"
})
local vehicleFolder = workspace:WaitForChild("Vehicles"):WaitForChild(LocalPlayer.Name)

VehicleTab:AddSlider({
	Name = "Engine Level",
	Min = 0,
	Max = 6,
	Default = 0,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Level",
	Callback = function(Value)
vehicleFolder:SetAttribute("engineLevel", Value)
	end    
})

VehicleTab:AddSlider({
	Name = "Brakes Level",
	Min = 0,
	Max = 6,
	Default = 0,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Level",
	Callback = function(Value)
    vehicleFolder:SetAttribute("brakesLevel", Value)
	end    
})

VehicleTab:AddSlider({
	Name = "Armor Level",
	Min = 0,
	Max = 6,
	Default = 0,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = "Level",
	Callback = function(Value)
        vehicleFolder:SetAttribute("armorLevel", Value)
	end    
})


-- // Credits Tab \\ --

CreditsTab:AddLabel("Credits to our Dev Lukas.")
CreditsTab:AddLabel("Made by nytheron.")

-- -- // Visuals Tab \\ --
local elementSpacing = 2
local healthBarHeight = 5
local maxDistance = 1000

local espTable = {}

local jobColors = {
    Police = Color3.fromRGB(0, 0, 255),
    ADAC = Color3.fromRGB(255, 165, 0),
    BusCompany = Color3.fromRGB(97, 64, 81),
    Citizen = Color3.fromRGB(169, 169, 169),
    FireDepartment = Color3.fromRGB(255, 0, 0),
    Prisoner = Color3.fromRGB(0, 0, 0),
    TruckCompany = Color3.fromRGB(0, 100, 0)
}

local espVisibility = {
    DisplayName = false,
    Name = false,
    HealthBar = false,
    Distance = false,
    Job = false,
    Wanted = false,
    Chams = false
}

local function createTextLabel(parent, name, textColor, font, textSize)
    local label = Instance.new("TextLabel")
    label.Name = name
    label.Parent = parent
    label.BackgroundTransparency = 1
    label.TextColor3 = textColor
    label.Font = font
    label.TextSize = textSize
    label.TextStrokeTransparency = 0
    label.Text = ""
    label.Size = UDim2.new(1, 0, 0, textSize + 2)
    return label
end

local function createESP(player, jobName)
    if player == LocalPlayer then return end
    if espTable[player] then return end

    local character = player.Character
    if not character then return end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = humanoidRootPart
    billboard.Size = UDim2.new(0, 180, 0, 100)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1,0,1,0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard

    local displayNameLabel = createTextLabel(frame, "DisplayNameLabel", Color3.fromRGB(255,255,255), Enum.Font.SourceSansBold, 14)
    local nameLabel = createTextLabel(frame, "NameLabel", Color3.fromRGB(255,255,255), Enum.Font.SourceSansBold, 13)
    local distanceLabel = createTextLabel(frame, "DistanceLabel", Color3.fromRGB(255,255,255), Enum.Font.SourceSansBold, 12)
    local jobLabel = createTextLabel(frame, "JobLabel", Color3.fromRGB(255,255,0), Enum.Font.SourceSansBold, 12)
    local wantedLabel = createTextLabel(frame, "WantedLabel", Color3.fromRGB(255,217,0), Enum.Font.SourceSansBold, 11)

    local healthBarFrame = Instance.new("Frame")
    healthBarFrame.Name = "HealthBarFrame"
    healthBarFrame.BackgroundTransparency = 0.75
    healthBarFrame.BorderSizePixel = 0
    healthBarFrame.Size = UDim2.new(1, 0, 0, healthBarHeight)
    healthBarFrame.Position = UDim2.new(0, 0, 0, 0)
    healthBarFrame.Parent = frame

    local healthBar = Instance.new("Frame")
    healthBar.Name = "HealthBar"
    healthBar.Size = UDim2.new(0.5, 0, 1, 0)
    healthBar.Position = UDim2.new(0.25, 0, 0, 0)
    healthBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    healthBar.Parent = healthBarFrame

    -- Chams
    local chams = Instance.new("Highlight")
    chams.Name = "Chams"
    chams.Adornee = character
    chams.FillColor = Color3.new(1, 1, 1)
    chams.FillTransparency = 0.3
    chams.OutlineTransparency = 1
    chams.Enabled = false
    chams.Parent = character

    local function updateESP()
        local humanoid = character:FindFirstChild("Humanoid")
        if not humanoid then return end

        local health = humanoid.Health
        local maxHealth = humanoid.MaxHealth
        local healthPercent = math.clamp(health / maxHealth, 0, 1)

        local localPlayerRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not localPlayerRootPart then return end

        local distance = (humanoidRootPart.Position - localPlayerRootPart.Position).Magnitude
        local isWanted = humanoidRootPart:GetAttribute("IsWanted") or false

        if distance > maxDistance then
            displayNameLabel.Visible = false
            nameLabel.Visible = false
            distanceLabel.Visible = false
            jobLabel.Visible = false
            wantedLabel.Visible = false
            healthBarFrame.Visible = false
            chams.Enabled = false
            return
        end

        displayNameLabel.Text = player.DisplayName
        nameLabel.Text = "@"..player.Name
        distanceLabel.Text = "Distance: "..math.floor(distance).." studs"
        jobLabel.Text = jobName or ""
        jobLabel.TextColor3 = jobColors[jobName] or Color3.fromRGB(255,255,255)

        wantedLabel.Text = isWanted and "WANTED" or ""
        wantedLabel.TextColor3 = isWanted and Color3.fromRGB(255,217,0) or Color3.fromRGB(150,150,150)

        if isWanted then
            local alpha = math.abs(math.sin(tick() * math.pi))
            wantedLabel.TextTransparency = alpha * 0.5
            wantedLabel.TextStrokeTransparency = alpha * 0.5
        else
            wantedLabel.TextTransparency = 0
            wantedLabel.TextStrokeTransparency = 0
        end

        healthBar.Size = UDim2.new(healthPercent * 0.5, 0, 1, 0)

        displayNameLabel.Visible = espVisibility.DisplayName
        nameLabel.Visible = espVisibility.Name
        distanceLabel.Visible = espVisibility.Distance
        jobLabel.Visible = espVisibility.Job
        wantedLabel.Visible = espVisibility.Wanted
        healthBarFrame.Visible = espVisibility.HealthBar
        chams.Enabled = espVisibility.Chams

        if espVisibility.Chams then
            chams.FillColor = jobColors[jobName] or Color3.new(1, 1, 1)
        end

        local yOffset = 0
        local elements = {
            {obj=displayNameLabel, height=displayNameLabel.AbsoluteSize.Y},
            {obj=nameLabel, height=nameLabel.AbsoluteSize.Y},
            {obj=distanceLabel, height=distanceLabel.AbsoluteSize.Y},
            {obj=jobLabel, height=jobLabel.AbsoluteSize.Y},
            {obj=wantedLabel, height=wantedLabel.AbsoluteSize.Y},
            {obj=healthBarFrame, height=healthBarHeight}
        }

        for _, element in ipairs(elements) do
            if element.obj.Visible then
                element.obj.Position = UDim2.new(0, 0, 0, yOffset)
                yOffset = yOffset + element.height + elementSpacing
            else
                element.obj.Position = UDim2.new(0, 0, 0, 0)
            end
        end

        billboard.Size = UDim2.new(0, 180, 0, yOffset)
    end

    local conn1 = humanoidRootPart:GetAttributeChangedSignal("IsWanted"):Connect(updateESP)
    local conn2 = RunService.Heartbeat:Connect(function()
        if not character.Parent then
            conn1:Disconnect()
            conn2:Disconnect()
            if espTable[player] then
                espTable[player] = nil
            end
            return
        end
        updateESP()
    end)

    billboard.Parent = character
    espTable[player] = {Billboard = billboard, Chams = chams, Connections = {conn1, conn2}}
end

local function removeESP(player)
    if espTable[player] then
        for _, conn in ipairs(espTable[player].Connections) do
            if conn.Connected then  -- ÃœberprÃ¼fe, ob die Verbindung noch aktiv ist
                conn:Disconnect()
            end
        end
        if espTable[player].Billboard and espTable[player].Billboard.Parent then
            espTable[player].Billboard:Destroy()
        end
        if espTable[player].Chams and espTable[player].Chams.Parent then
            espTable[player].Chams:Destroy()
        end
        espTable[player] = nil
    end
end

local function updateESPForPlayers()
    local currentPlayers = {}
    for _, player in pairs(Players:GetPlayers()) do
        currentPlayers[player] = true
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local jobName = player.Team and player.Team.Name
            if jobName and jobColors[jobName] then
                if not espTable[player] then
                    createESP(player, jobName)
                end
            else
                removeESP(player)
            end
        end
    end

    for trackedPlayer in pairs(espTable) do
        if not currentPlayers[trackedPlayer] then
            removeESP(trackedPlayer)
        end
    end
end

local function checkPlayerJobChanges()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local currentJob = player.Team and player.Team.Name
            local espBillboard = espTable[player] and espTable[player].Billboard
            if espBillboard then
                local frame = espBillboard:FindFirstChildOfClass("Frame")
                if frame then
                    local jobLabel = frame:FindFirstChild("JobLabel")
                    if jobLabel and jobLabel.Text ~= currentJob then
                        jobLabel.Text = currentJob
                        jobLabel.TextColor3 = jobColors[currentJob] or Color3.fromRGB(255, 255, 255)
                    end
                end
            end
        end
    end
end

local function toggleESP()
    updateESPForPlayers()
end

task.spawn(function()
    while true do
        updateESPForPlayers()
        checkPlayerJobChanges()
        task.wait(1)
    end
end)

Players.PlayerRemoving:Connect(removeESP)

VisualsTab:AddToggle({
    Name = "Display Name",
    Default = false,
    Callback = function(Value)
        espVisibility.DisplayName = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Username",
    Default = false,
    Callback = function(Value)
        espVisibility.Name = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Health Bar",
    Default = false,
    Callback = function(Value)
        espVisibility.HealthBar = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Distance",
    Default = false,
    Callback = function(Value)
        espVisibility.Distance = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Job",
    Default = false,
    Callback = function(Value)
        espVisibility.Job = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Wanted Status",
    Default = false,
    Callback = function(Value)
        espVisibility.Wanted = Value
        toggleESP()
    end
})

VisualsTab:AddToggle({
    Name = "Chams ESP",
    Default = false,
    Callback = function(Value)
        espVisibility.Chams = Value
        toggleESP()
    end
})

updateESPForPlayers()

-- Voice Chat Tab

VoiceChatTab:AddLabel("Only works, if you are on the same server you got VC banned\nand you got VC enabled in your settings!")

VoiceChatTab:AddButton({
    Name = "Rejoin Voice Chat",
    Callback = function()
        local voiceChatService = game:GetService("VoiceChatService")
        voiceChatService:joinVoice()
        OrionLib:MakeNotification({
                Name = "Voice Chat",
                Content = "You sucessfully rejoined Voice Chat.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
    end
})

-- Aimbot Tab \\ --

-- // Services \\ --
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- // Variablen \\ --
local holdingRightClick = false
local aimbotEnabled = false
local fovEnabled = false
local teamCheckEnabled = true -- Team-Check standardmÃ¤ÃŸig aktiviert
local fovRadius = 100
local fovTransparency = 0.5
local fovColor = Color3.fromRGB(255, 0, 0)
local predictionFactor = 0.3
local smoothness = 0.35 -- standard smoothness

-- // Teams, die NIEMALS anvisiert werden sollen \\ --
local ignoredTeams = {
    "ADAC",
    "BusCompany",
    "FireDepartment",
    "Prisoner",
    "TruckCompany"
}

-- // Welches KÃ¶rperteil soll anvisiert werden? "HumanoidRootPart" oder "Head" \\ --
local aimPart = "HumanoidRootPart" -- Hier kannst du "Head" eintragen, um auf den Kopf zu zielen

-- // FOV Circle \\ --
local FOVCircle = Drawing.new("Circle")
FOVCircle.Radius = fovRadius
FOVCircle.Color = fovColor
FOVCircle.Filled = false
FOVCircle.Thickness = 2
FOVCircle.Transparency = fovTransparency
FOVCircle.Visible = false

-- // Aimbot Toggle \\ --
AimbotTab:AddLabel("Enable/disable with 'V' key")
local aimbotToggle = AimbotTab:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(Value)
        aimbotEnabled = Value
        FOVCircle.Visible = fovEnabled and aimbotEnabled
        OrionLib:MakeNotification({
            Name = "Aimbot",
            Content = Value and "Aimbot enabled" or "Aimbot disabled",
            Time = 3,
            Image = "rbxassetid://4483345998"
        })
    end
})

-- // FOV Toggle \\ --
local fovToggle = AimbotTab:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(Value)
        fovEnabled = Value
        FOVCircle.Visible = fovEnabled and aimbotEnabled
    end
})

-- // Team-Check Toggle \\ --
local teamCheckToggle = AimbotTab:AddToggle({
    Name = "Team-Check",
    Default = teamCheckEnabled,
    Callback = function(Value)
        teamCheckEnabled = Value
    end
})

AimbotTab:AddDropdown({
    Name = "Aim Part",
    Options = {"HumanoidRootPart", "Head"},
    Default = aimPart,
    Callback = function(Value)
        aimPart = Value
    end
})

-- // FOV Settings \\ --
local fovSizeSlider = AimbotTab:AddSlider({
    Name = "FOV Size",
    Min = 50,
    Max = 500,
    Default = fovRadius,
    Callback = function(Value)
        fovRadius = Value
        FOVCircle.Radius = Value
    end
})

local fovColorPicker = AimbotTab:AddColorpicker({
    Name = "FOV Color",
    Default = fovColor,
    Callback = function(Value)
        fovColor = Value
        FOVCircle.Color = Value
    end
})

local fovTransparencySlider = AimbotTab:AddSlider({
    Name = "FOV Transparency",
    Min = 0,
    Max = 1,
    Default = fovTransparency,
    Increment = 0.05,
    Callback = function(Value)
        fovTransparency = Value
        FOVCircle.Transparency = Value
    end
})

local smoothnessSlider = AimbotTab:AddSlider({
    Name = "Smoothness",
    Min = 0.01,
    Max = 1,
    Default = smoothness,
    Increment = 0.01,
    Callback = function(Value)
        smoothness = Value
    end
})

-- // V-Key Toggle + MouseRightClick Track \\ --
UIS.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.V and not gameProcessed then
        aimbotEnabled = not aimbotEnabled
        aimbotToggle:Set(aimbotEnabled)
        FOVCircle.Visible = fovEnabled and aimbotEnabled
    end

    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = true
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingRightClick = false
    end
end)

-- // Team Check (Gegnerteam ermitteln) \\ --
local function getEnemyTeamName()
    local myTeam = LocalPlayer.Team
    if myTeam then
        if myTeam.Name == "Police" then
            return "Citizen"
        elseif myTeam.Name == "Citizen" then
            return "Police"
        end
    end
    return nil
end

-- // ÃœberprÃ¼ft, ob ein Team ignoriert werden soll \\ --
local function isTeamIgnored(teamName)
    for _, ignoredTeam in ipairs(ignoredTeams) do
        if teamName == ignoredTeam then
            return true
        end
    end
    return false
end

-- // NÃ¤chsten Gegner innerhalb FOV finden \\ --
local function getClosestEnemyInFOV()
    local closestPlayer = nil
    local shortestDistance = fovRadius

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(aimPart) then
            local playerTeam = player.Team
            local teamName = playerTeam and playerTeam.Name or ""

            -- Immer ignorieren, wenn Team in der Ignore-Liste ist
            if isTeamIgnored(teamName) then
                continue
            end

            -- Team-Check nur durchfÃ¼hren, wenn aktiviert
            local isEnemy = true
            if teamCheckEnabled then
                local enemyTeamName = getEnemyTeamName()
                isEnemy = enemyTeamName and playerTeam and playerTeam.Name == enemyTeamName
            end

            if isEnemy then
                local targetPart = player.Character[aimPart]
                local screenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude

                if onScreen and distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- // Haupt Aimbot Loop \\ --
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    if aimbotEnabled and holdingRightClick then
        local target = getClosestEnemyInFOV()
        if target and target.Character and target.Character:FindFirstChild(aimPart) then
            local targetPart = target.Character[aimPart]
            local origin = Camera.CFrame.Position
            local predictedPosition = targetPart.Position + targetPart.Velocity * predictionFactor

            local currentCFrame = Camera.CFrame
            local desiredCFrame = CFrame.new(origin, predictedPosition)
            Camera.CFrame = currentCFrame:Lerp(desiredCFrame, smoothness)
        end
    end
end)

-- // SilentAim Tab \\

local Settings = {
    SilentAim = false,
    Prediction = false,
    VisibleCheck = false,
    IgnoreKnocked = true,
    FOVRadius = 100,
    FOVColor = Color3.fromRGB(255, 255, 0),
    FriendNames = {}
}

local circle = Drawing.new("Circle")
circle.Radius = Settings.FOVRadius
circle.Color = Settings.FOVColor
circle.Thickness = 2
circle.NumSides = 100
circle.Filled = false
circle.Transparency = 1
circle.Visible = false

SilentAimTab:AddToggle({
    Name = "Silent Aim",
    Default = false,
    Callback = function(Value)
        Settings.SilentAim = Value
        circle.Visible = Value
    end
})

SilentAimTab:AddToggle({
    Name = "Prediction",
    Default = false,
    Callback = function(Value)
        Settings.Prediction = Value
    end
})

SilentAimTab:AddToggle({
    Name = "Visible Check",
    Default = false,
    Callback = function(Value)
        Settings.VisibleCheck = Value
    end
})

SilentAimTab:AddToggle({
    Name = "Knocked Check",
    Default = true,
    Callback = function(Value)
        Settings.IgnoreKnocked = Value
    end
})

SilentAimTab:AddSlider({
    Name = "FOV Size",
    Min = 50,
    Max = 500,
    Default = 100,
    Callback = function(Value)
        Settings.FOVRadius = Value
        circle.Radius = Value
    end
})

SilentAimTab:AddTextbox({
    Name = "Friend Names (kommagetrennt)",
    Default = "",
    TextDisappear = false,
    Callback = function(Value)
        local names = {}
        for name in string.gmatch(Value, '([^,]+)') do
            table.insert(names, string.lower(name:match("^%s*(.-)%s*$")))
        end
        Settings.FriendNames = names
    end
})

--// Silent-Aim Logic \\--

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

local lastShootTime = 0
local shootCooldown = 0.1 -- 100ms Abklingzeit fÃ¼r Schuss

local function IsVisible(part)
    if not part then return false end
    local origin = Camera.CFrame.Position
    local direction = (part.Position - origin)
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, direction, rayParams)
    return result and result.Instance:IsDescendantOf(part.Parent)
end

local function Predict(target)
    if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end
    local pos = target.Character.Head.Position
    local vel = target.Character.HumanoidRootPart.Velocity
    return Settings.Prediction and (pos + vel * 0.125) or pos
end

local function GetCurrentWeapon()
    for _, v in ipairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("Tool") then
            return v
        end
    end
end

local function IsFriend(player)
    local lowerName = string.lower(player.Name)
    for _, friendName in ipairs(Settings.FriendNames) do
        if lowerName == friendName then
            return true
        end
    end
    return false
end

local function IsKnocked(player)
    if not player.Character then return true end
    local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return true end
    return humanoid.Health <= 0
end

local function GetClosestPlayer()
    local closest, shortestDistance = nil, Settings.FOVRadius

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            if IsFriend(player) then
                continue
            end

            if Settings.IgnoreKnocked and IsKnocked(player) then
                continue
            end

            local screenPos, onScreen = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                if dist < shortestDistance then
                    if not Settings.VisibleCheck or IsVisible(player.Character:FindFirstChild("Head")) then
                        closest = player
                        shortestDistance = dist
                    end
                end
            end
        end
    end

    return closest
end

local function ShootAt(target)
    if tick() - lastShootTime < shootCooldown then
        return
    end
    lastShootTime = tick()

    if not target or not target.Character or not target.Character:FindFirstChild("Head") then return end
    local predictedPos = Predict(target)
    local direction = (predictedPos - Camera.CFrame.Position).Unit

    local weapon = GetCurrentWeapon()
    if not weapon then return end

    local args = {
        weapon,
        predictedPos,
        direction
    }

    local remote = ReplicatedStorage:FindFirstChild("Bnl")
    if remote then
        local event = remote:FindFirstChild("635831fc-aa69-408c-a888-190900cf67b3")
        if event then
            event:FireServer(unpack(args))
        end
    end
end

RunService.RenderStepped:Connect(function()
    circle.Position = screenCenter

    if Settings.SilentAim then
        local target = GetClosestPlayer()
        if target and tick() - lastShootTime >= shootCooldown then
            ShootAt(target)
        end
    end
end)

--// AutoFarm Tab \\ --
AutoFarmTab:AddLabel("If you use the city bus driver farm,\nyou might get kicked for noclip!")
AutoFarmTab:AddLabel("That's not our fault!")
AutoFarmTab:AddLabel("That's the fault of the anti-cheat systems!")

local Section = AutoFarmTab:AddSection({
    Name = "Bus"
})

-- City Bus Daten
local cityStations = {
    Vector3.new(-518.2562, 10.1831, 829.0705),
    Vector3.new(110.1080, 10.1750, 1609.4246),
    Vector3.new(-1226.0480, 10.1735, 3248.8435),
    Vector3.new(-1785.2961, 10.1650, 3248.5349),
    Vector3.new(-1531.1357, 10.1867, 3964.4639),
    Vector3.new(-967.9738, 10.1731, 3965.1389),
    Vector3.new(-291.7942, 10.1723, 3595.8430),
    Vector3.new(-997.8533, 10.1699, 3925.7571),
    Vector3.new(-1561.2402, 10.1840, 3925.9019),
    Vector3.new(-1748.6055, 10.1693, 3298.4563),
    Vector3.new(-1195.4933, 10.1659, 3298.4407),
    Vector3.new(161.9877, 10.1740, 1575.2122),
    Vector3.new(-547.5060, 10.1776, 789.8560),
    Vector3.new(-1444.7609, 10.1879, 789.9199)
}

local cityRotations = {
    [1] = 0,
    [2] = -90,
    [3] = -90,
    [4] = 0,
    [5] = 180,
    [6] = 0,
    [7] = 90,
    [8] = 90,
    [9] = 0,
    [10] = 180,
    [11] = 0,
    [12] = 90,
    [13] = 90,
    [14] = 0,
    [15] = 180
}

local cityWaypoints = {
    [1] = { Vector3.new(-235.2529, 9.9398, 1303.6300) }, -- 1 â†’ 2

    [2] = { -- 2 â†’ 3, 1. und 2. Waypoint 15 Studs tiefer, 5. Waypoint entfernt
        Vector3.new(-8.3575, 51.9614, 1780.4568),
        Vector3.new(-126.5800, 43.5866, 2003.7891),
        Vector3.new(-274.6644, 9.9315, 2122.2737),
        Vector3.new(-625.2094, 5.6226, 2707.7380),
        Vector3.new(-1018.3108, 34.6537, 3128.8110)
    },

    [4] = { -- 4 â†’ 5, 1. Waypoint 15 Studs tiefer, 3. Waypoint entfernt
        Vector3.new(-1597.2870, 48.7350, 3594.4456),
        Vector3.new(-1629.9850, 39.4920, 3685.6567)
    },

    [6] = { -- 6 â†’ 7
        Vector3.new(-762.0945, 5.6180, 3897.3623),
        Vector3.new(-714.2070, 51.7027, 3837.8560),
        Vector3.new(-542.8757, 37.4905, 3746.7854),
        Vector3.new(-396.3587, 5.6328, 3691.5720)
    },

    [7] = { -- 7 â†’ 8
        Vector3.new(-713.9056, 10.1624, 2831.1653),
        Vector3.new(-635.5913, 54.5318, 2961.9038),
        Vector3.new(-442.5694, 57.7715, 3263.4375),
        Vector3.new(-404.3798, 53.0088, 3426.5686),
        Vector3.new(-355.9079, 41.4247, 3568.6230)
    },

    [8] = { -- 8 â†’ 9 (reverse of 7 â†’ 8, without last waypoint)
        Vector3.new(-404.3798, 53.0088, 3426.5686),
        Vector3.new(-442.5694, 57.7715, 3263.4375),
        Vector3.new(-635.5913, 54.5318, 2961.9038),
        Vector3.new(-713.9056, 10.1624, 2831.1653)
    },

    [9] = { -- 9 â†’ 10 (reverse von 4 â†’ 5)
        Vector3.new(-1629.9850, 39.4920, 3685.6567),
        Vector3.new(-1597.2870, 48.7350, 3594.4456)
    },

    [11] = { -- 11 â†’ 12 (reverse von 2 â†’ 3, mit letztem Punkt zuerst)
        Vector3.new(-1018.3108, 34.6537, 3128.8110),
        Vector3.new(-625.2094, 5.6226, 2707.7380),
        Vector3.new(-274.6644, 9.9315, 2122.2737),
        Vector3.new(-126.5800, 43.5866, 2003.7891),
        Vector3.new(-8.3575, 51.9614, 1780.4568)
    },

    [12] = { Vector3.new(-235.2529, 9.9398, 1303.6300) } -- 12 â†’ 13
}

-- Rural Bus Daten
local ruralStations = {
    Vector3.new(-961.6341, 10.1855, -1522.8821),
    Vector3.new(489.1725, 10.1847, -1522.4946),
    Vector3.new(-999.1538, 10.1730, -1562.4589),
    Vector3.new(-1101.9121, 10.1816, -241.0703),
    Vector3.new(-1453.7085, 10.1836, 789.7069),
    Vector3.new(-1528.6180, 10.1850, 2734.1672),
    Vector3.new(-855.7278, 10.1848, 2733.2000),
    Vector3.new(-330.7853, 10.1837, 3625.2610),
    Vector3.new(-891.3245, 10.1827, 2694.3018),
    Vector3.new(-1561.6139, 10.1804, 2694.0132),
    Vector3.new(-1418.1636, 10.1804, 829.0132),
    Vector3.new(-1090.0830, 10.1898, -266.1007)
}

local ruralRotations = {
    [1] = 0,
    [2] = 0,
    [3] = 180,
    [4] = 90,
    [5] = -90,
    [6] = 180,
    [7] = 0,
    [8] = -90,
    [9] = -90,
    [10] = 0,
    [11] = -180,
    [12] = 90,
    [13] = -90
}

local ruralWaypoints = {
    [1] = { -- 1 â†’ 2
        Vector3.new(-83.3672, 10.1641, -1534.0985),
        Vector3.new(131.5495, 10.1813, -1445.9326)
    },
    [2] = { -- 2 â†’ 3
        Vector3.new(131.5495, 10.1813, -1445.9326),
        Vector3.new(-83.3672, 10.1641, -1534.0985)
    },
    [7] = { -- 7 â†’ 8
        Vector3.new(-713.9056, 10.1624, 2831.1653),
        Vector3.new(-635.5913, 54.5318, 2961.9038),
        Vector3.new(-442.5694, 57.7715, 3263.4375),
        Vector3.new(-404.3798, 53.0088, 3426.5686),
        Vector3.new(-355.9079, 41.4247, 3568.6230)
    },
    [8] = { -- 8 â†’ 9 (reverse of 7 â†’ 8, without last waypoint)
        Vector3.new(-404.3798, 53.0088, 3426.5686),
        Vector3.new(-442.5694, 57.7715, 3263.4375),
        Vector3.new(-635.5913, 54.5318, 2961.9038),
        Vector3.new(-713.9056, 10.1624, 2831.1653)
    }
}

local autoFarmToggle = false
local selectedBusType = "City Bus Driver"
local baseYaw = 0
local currentYaw = 0

local function ensurePlayerInVehicle()
    local player = Players.LocalPlayer
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end

    local vehicle = workspace:FindFirstChild("Vehicles") and workspace.Vehicles:FindFirstChild(player.Name)
    if not vehicle then
        task.wait(0.5)
        vehicle = workspace:FindFirstChild("Vehicles") and workspace.Vehicles:FindFirstChild(player.Name)
        if not vehicle then return end
    end

    local humanoid = character:FindFirstChildWhichIsA("Humanoid")
    local driveSeat = vehicle:FindFirstChild("DriveSeat")

    if humanoid and driveSeat then
        while autoFarmToggle and humanoid.SeatPart ~= driveSeat do
            driveSeat:Sit(humanoid)
            task.wait(0.05)
        end
    end
end

task.spawn(function()
    while true do
        if autoFarmToggle then
            ensurePlayerInVehicle()
        end
        task.wait(0.1)
    end
end)

local function tweenTo(destination)
    local plr = Players.LocalPlayer
    local car = workspace.Vehicles[plr.Name]
    if not car then return false end

    car:SetAttribute("ParkingBrake", true)
    car:SetAttribute("Locked", true)
    car.PrimaryPart = car:FindFirstChild("DriveSeat", true)
    ensurePlayerInVehicle()

    local targetCFrame = CFrame.new(destination) * CFrame.Angles(0, currentYaw, 0)
    local distance = (car.PrimaryPart.Position - destination).Magnitude
    local tweenDuration = distance / 90

    local TweenInfoToUse = TweenInfo.new(tweenDuration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local TweenValue = Instance.new("CFrameValue")
    TweenValue.Value = car:GetPivot()

    TweenValue.Changed:Connect(function(newCFrame)
        car:PivotTo(newCFrame)
        car.DriveSeat.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        car.DriveSeat.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end)

    local tween = TweenService:Create(TweenValue, TweenInfoToUse, { Value = targetCFrame })
    tween:Play()
    tween.Completed:Wait()

    car:SetAttribute("ParkingBrake", true)
    car:SetAttribute("Locked", true)
    TweenValue:Destroy()
    return true
end

local function tweenThroughPoints(points)
    for _, point in ipairs(points) do
        if not autoFarmToggle then return false end
        local success = tweenTo(point)
        if not success then return false end
    end
    return true
end

local function runAutoFarm()
    local stations, rotations, waypoints
    if selectedBusType == "City Bus Driver" then
        stations = cityStations
        rotations = cityRotations
        waypoints = cityWaypoints
    else
        stations = ruralStations
        rotations = ruralRotations
        waypoints = ruralWaypoints
    end

    local car = workspace.Vehicles[Players.LocalPlayer.Name]
    if car then
        local _, y = car:GetPivot():ToEulerAnglesYXZ()
        baseYaw = y
        currentYaw = baseYaw
    end

    while autoFarmToggle do
        for i = 1, #stations do
            if not autoFarmToggle then break end

            game.StarterGui:SetCore("SendNotification", {
                Title = "AutoFarm",
                Text = "Moving to Station " .. i,
                Duration = 3
            })

            local success = tweenTo(stations[i])
            if not success then break end

            if i == 1 then
                task.wait(3)
            else
                task.wait(4)
            end

            if waypoints[i] then
                if not tweenThroughPoints(waypoints[i]) then break end
            end

            if i < #stations then
                local rotation = rotations[i + 1] or 0
                if rotation ~= 0 then currentYaw = currentYaw + math.rad(rotation) end
            else
                local rotation = rotations[#stations + 1] or 0
                if rotation ~= 0 then currentYaw = currentYaw + math.rad(rotation) end
            end
        end
    end
end

AutoFarmTab:AddToggle({
    Name = "AutoFarm",
    Default = false,
    Callback = function(value)
        autoFarmToggle = value
        if value then
            spawn(runAutoFarm)
        end
    end
})

AutoFarmTab:AddDropdown({
    Name = "Bus Type",
    Default = "City Bus Driver",
    Options = {"City Bus Driver", "Rural Bus Driver"},
    Callback = function(value)
        selectedBusType = value
    end
})

-- // AutoRobTab \\ --

AutoRobTab:AddButton({
    Name = "Execute AutoRob",
    Callback = function()
        OrionLib:MakeNotification({
            Name = "Quantum - AutoRob",
            Content = "Executing AutoRob script...",
            Duration = 3,
            Image = "rbxassetid://4483345998"
        })
        loadstring(game:HttpGet("https://raw.githubusercontent.com/kernelexecutionguard/quantum/refs/heads/main/QuantumAutoRob"))()
    end
})

-- // TeleportTab \\ --

local selectedLocation = nil
local selectedLocation1 = nil
local locations = {
    ["Prison Out"] = CFrame.new(-615.58, 5.29, 2862.24),
    ["Prison In"] = CFrame.new(-572.11, 6.38, 3061.37),
    ["Fire Station"] = CFrame.new(-1025.36, 4.50, 3899.16),
    ["Truck Company"] = CFrame.new(704.45, 4.23, 1479.93),
    ["Smuggler (near clothing store)"] = CFrame.new(796.56, -18.67, -1526.38),
    ["Tuning Garage"] = CFrame.new(-1418.84, 5.48, 132.10),
    ["Bus Company"] = CFrame.new(-1682.30, 8.78, -1273.08),
    ["Hospital"] = CFrame.new(-278.83, 7.75, 1085.80),
    ["Police Station"] = CFrame.new(-1702.70, 4.61, 2723.56),
    ["Dealership"] = CFrame.new(-1415.70, 4.55, 940.53),
}
local locations1 = {
            ["Bank"] = CFrame.new(-1183.296, 10.912, 3228.297),
            ["Jewellery"] = CFrame.new(-407.536, 21.950, 3516.854),
            ["Erwin Club"] = CFrame.new(-1856.962, 5.706, 2990.518),
            ["Gas-N-Go Fuel"] = CFrame.new(-1560.674, 3.944, 3813.656),
            ["Ares Fuel"] = CFrame.new(-824.447, 4.182, 1512.941),
            ["Tool Shop"] = CFrame.new(-767.815, 4.374, 663.494),
            ["Farm Shop"] = CFrame.new(-887.220, 5.831, -1150.356),
            ["Osso Fuel"] = CFrame.new(-27.464, 5.245, -749.413),
            ["Container Ship"] = CFrame.new(1191.836, 29.550, 2140.703),
            ["Clothing Store"] = CFrame.new(440.400, 5.520, -1438.111),
}

local function noclipModel(model, state)
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not state
        end
    end
end

local RunService = game:GetService("RunService")
local function moveVehicle(vehicle, targetCFrame, speed)
    if not vehicle.PrimaryPart then
        vehicle.PrimaryPart = vehicle:FindFirstChild("Primary") or vehicle:FindFirstChildWhichIsA("BasePart")
    end

    local connection
    connection = RunService.Stepped:Connect(function(_, dt)
        if not vehicle.PrimaryPart then
            connection:Disconnect()
            return
        end

        local currentPos = vehicle.PrimaryPart.Position
        local targetPos = targetCFrame.Position

        noclipModel(vehicle, true)

        local keepHeight = currentPos.Y

        local adjustedTargetPos = Vector3.new(targetPos.X, keepHeight, targetPos.Z)
        local delta = adjustedTargetPos - currentPos

        if delta.Magnitude < 1 then
            noclipModel(vehicle, false)
            connection:Disconnect()
            return
        end

        local move = delta.Unit * speed * dt

        if move.Magnitude > delta.Magnitude then
            move = delta
        end

        vehicle:SetPrimaryPartCFrame(vehicle.PrimaryPart.CFrame + move)

        for _, part in ipairs(vehicle:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
    end)
end

TeleportsTab:AddButton({
    Name = "TP to Robbable Vending Machine",
    Callback = function()
        ensurePlayerInVehicle()
        local character = player.Character or player.CharacterAdded:Wait()
        local vehicle = workspace.Vehicles:FindFirstChild(player.Name)
        local machines = workspace:FindFirstChild("Robberies") and workspace.Robberies:FindFirstChild("VendingMachines")
        if not vehicle or not machines then
            print("Vehicle or machines not found")
            return
        end

        local closest, shortest = nil, math.huge
        for _, model in pairs(machines:GetChildren()) do
            for _, part in pairs(model:GetChildren()) do
                if part:IsA("Part") and part.Color == Color3.fromRGB(73, 147, 0) then
                    local dist = (character.HumanoidRootPart.Position - part.Position).Magnitude
                    if dist < shortest then
                        shortest = dist
                        closest = part
                    end
                end
            end
        end
        if not closest then
            print("No valid vending machine found")
            return
        end

        moveVehicle(vehicle, closest.CFrame, 170)
    end,
})

TeleportsTab:AddButton({
    Name = "Teleport to Nearest Dealer",
    Callback = function()
        ensurePlayerInVehicle()
        local character = player.Character or player.CharacterAdded:Wait()
        local vehicle = workspace.Vehicles:FindFirstChild(player.Name)
        if not vehicle then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No vehicle found.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
            return
        end

        local dealers = workspace:FindFirstChild("Dealers")
        if not dealers then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Dealers not found.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
            return
        end

        local closest, shortest = nil, math.huge
        for _, dealer in pairs(dealers:GetChildren()) do
            if dealer:FindFirstChild("Head") then
                local dist = (character.HumanoidRootPart.Position - dealer.Head.Position).Magnitude
                if dist < shortest then
                    shortest = dist
                    closest = dealer.Head
                end
            end
        end

        if not closest then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No dealer found.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
            return
        end

        moveVehicle(vehicle, closest.CFrame + Vector3.new(0, 5, 0), 170)
    end
})





TeleportsTab:AddDropdown({
    Name = "Normal Places",
    Default = nil,
    Options = (function()
        local opts = {}
        for k,_ in pairs(locations) do
            table.insert(opts, k)
        end
        return opts
    end)(),
    Callback = function(value)
        selectedLocation = value
        print("Dropdown selected:", value)
    end
})

TeleportsTab:AddButton({
    Name = "Teleport To Normal Places",
    Callback = function()
        ensurePlayerInVehicle()
        if not selectedLocation then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a location first.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
            return
        end

        local vehicle = workspace.Vehicles:FindFirstChild(player.Name)
        if not vehicle or not vehicle:IsA("Model") then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No vehicle found.",
                Duration = 3,
                Image = "rbxassetid://4483345998",
            })
            return
        end

        local targetCFrame = locations[selectedLocation]
        if not targetCFrame then return end

        moveVehicle(vehicle, targetCFrame, 170)
    end
})

local Section = TeleportsTab:AddSection({
	Name = "Robbery Places"
})

TeleportsTab:AddDropdown({
    Name = "Robbery Places",
    Default = nil,
    Options = (function()
        local opts = {}
        for k,_ in pairs(locations1) do
            table.insert(opts, k)
        end
        return opts
    end)(),
    Callback = function(value)
        selectedLocation1 = value
        print("Dropdown selected:", value)
    end
})



TeleportsTab:AddButton({
    Name = "Teleport To Robbery Places",
    Callback = function()
        ensurePlayerInVehicle()
        if not selectedLocation1 then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a location first.",
                Duration = 3,
                Image = "rbxassetid://4483345998"
            })
            return
        end

        local vehicle = workspace.Vehicles:FindFirstChild(player.Name)
        if not vehicle or not vehicle:IsA("Model") then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "No vehicle found.",
                Duration = 3,
                Image = "rbxassetid://4483345998",
            })
            return
        end

        local targetCFrame1 = locations1[selectedLocation1]
        if not targetCFrame1 then return end

        moveVehicle(vehicle, targetCFrame1, 170)
    end
})

-- // PoliceTab \\ --

TaserEnabled = false
PoliceTab:AddToggle({
    Name = "Auto-Taser",
    Default = false,
    Callback = function(Value)
        TaserEnabled = Value
    end    
})

Players = game:GetService("Players")
ReplicatedStorage = game:GetService("ReplicatedStorage")
RunService = game:GetService("RunService")
Workspace = game:GetService("Workspace")
LocalPlayer = Players.LocalPlayer
MaxDistance = 20

local excludedTeams = {
    ["Police"] = true,
    ["Adac"] = true,
    ["Company"] = true,
    ["FireDepartment"] = true,
    ["Prisoner"] = true,
    ["TruckCompany"] = true
}

function isKnocked(player)
    local h = player.Character and player.Character:FindFirstChild("Humanoid")
    return h and h.Health <= (h.MaxHealth * 0.2)
end

function isVisible(player)
    local origin = LocalPlayer.Character.Head.Position
    local target = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not target then return false end

    local direction = (target.Position - origin).Unit * 1000
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = { LocalPlayer.Character }
    params.FilterType = Enum.RaycastFilterType.Blacklist

    local result = Workspace:Raycast(origin, direction, params)
    return result and result.Instance:IsDescendantOf(player.Character)
end

function calculatePrediction(targetPlayer)
    local hrp = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    local velocity = hrp.Velocity or Vector3.new(0, 0, 0)
    local ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue() / 1000
    return hrp.Position + (velocity * ping)
end

function getNearestPlayer()
    local closest, shortestDist = nil, MaxDistance
    for _, player in pairs(Players:GetPlayers()) do
        if
            player ~= LocalPlayer
            and player.Team
            and not excludedTeams[player.Team.Name]
            and player.Character
            and player.Character:FindFirstChild("HumanoidRootPart")
        then
            local hrp = player.Character.HumanoidRootPart

            --  Nur wenn Spieler "IsWanted" == true ist
            if hrp:GetAttribute("IsWanted") == true then
                local dist = (LocalPlayer.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                if dist <= MaxDistance and not isKnocked(player) and isVisible(player) and dist < shortestDist then
                    closest, shortestDist = player, dist
                end
            end
        end
    end
    return closest
end

function taserCheck()
    return LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Taser")
end

function fireTaser()
    if not TaserEnabled or not taserCheck() then return end
    local target = getNearestPlayer()
    if target then
        local pos = calculatePrediction(target)
        if not pos then return end
        game:GetService("ReplicatedStorage"):WaitForChild("Bnl"):WaitForChild("c6011f40-2809-4686-a297-33283dd11715"):FireServer(
            LocalPlayer.Character.Taser,
            pos,
            (pos - LocalPlayer.Character.HumanoidRootPart.Position).Unit
        )
    end
end

RunService.Heartbeat:Connect(fireTaser)

-- // AutoRadar \\ -- 
local autoRadarToggle = false
local cooldown5 = false

local radarRemoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("Bnl"):WaitForChild("bbb7c252-304d-4582-b2a0-89eb9d3a0855")
if not radarRemoteEvent then
    return
end
local Section = PoliceTab:AddSection({
	Name = "Farming"
})

PoliceTab:AddToggle({
	Name = "Radar-Farm",
	Default = false,
	Callback = function(Value)
          autoRadarToggle = Value
	end    
})

RunService.RenderStepped:Connect(function()
    if not cooldown5 and autoRadarToggle then
        cooldown5 = true

        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local primaryPart = character:FindFirstChild("HumanoidRootPart")

        if not primaryPart then
            cooldown5 = false
            return
        end

        local radarGun = character:FindFirstChild("Radar Gun")
        if radarGun then
            for _, vehicle in pairs(workspace:WaitForChild("Vehicles"):GetChildren()) do
                local driveSeat = vehicle:FindFirstChild("DriveSeat")
                if driveSeat then
                    local direction = (driveSeat.Position - primaryPart.Position).Unit
                    radarRemoteEvent:FireServer(radarGun, driveSeat.Position, direction)
                end
            end
        end

        task.wait(2)
        cooldown5 = false
    end
end)

local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local AntiAFKEnabled = false
LocalPlayer.Idled:Connect(function()
    if AntiAFKEnabled then
        VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    end
end)

PoliceTab:AddToggle({
	Name = "AntiAfk",
	Default = false,
	Callback = function(Value)
            AntiAFKEnabled = Value
	end    
})

-- // Misc Tab \\ --

local function JumpOut()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer    
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid and humanoid.SeatPart then
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

local AntiTaserEnabled = false
local Connections = {}


MiscTab:AddButton({
	Name = "Jump Out From Police Vehicle",
	Callback = function()
JumpOut()
  	end    
})

MiscTab:AddToggle({
	Name = "Anti-Taser",
	Default = false,
	Callback = function(Value)
               AntiTaserEnabled = Value
		
		for _, c in ipairs(Connections) do
			c:Disconnect()
		end
		Connections = {}
		
		if AntiTaserEnabled then
			local function Setup()
				local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
				local humanoid = char:WaitForChild("Humanoid")
				local hrp = char:WaitForChild("HumanoidRootPart")
				
				-- Fix PlatformStand und State
				table.insert(Connections, humanoid.StateChanged:Connect(function(_, new)
					if new == Enum.HumanoidStateType.Physics or new == Enum.HumanoidStateType.PlatformStanding then
						humanoid:ChangeState(Enum.HumanoidStateType.Running)
					end
				end))
				
				-- Heartbeat Loop
				table.insert(Connections, game:GetService("RunService").Heartbeat:Connect(function()
					if humanoid.PlatformStand then
						humanoid.PlatformStand = false
					end
					if humanoid.WalkSpeed < normalWalkSpeed then
						humanoid.WalkSpeed = normalWalkSpeed
					end
					if hrp.Anchored then
						hrp.Anchored = false
					end
				end))
			end
			
			Setup()
			
			game.Players.LocalPlayer.CharacterAdded:Connect(function()
				wait(1)
				Setup()
			end)
		end
	end    
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

local antiArrestEnabled = false
local detectionRadius = 20 
local escapeDistance = 25  
local escapeSpeed = 28     

local isTweening = false

MiscTab:AddToggle({
	Name = "Anti-Arrest",
	Default = false,
	Callback = function(Value)
        antiArrestEnabled = Value
	end    
})

RunService.RenderStepped:Connect(function()
    if not antiArrestEnabled or isTweening then return end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Team and player.Team.Name == "Police" then
            local targetChar = player.Character
            if targetChar and targetChar:FindFirstChild("HumanoidRootPart") then
                local targetHRP = targetChar.HumanoidRootPart
                local distance = (HumanoidRootPart.Position - targetHRP.Position).Magnitude
                if distance < detectionRadius then
                    local direction = (HumanoidRootPart.Position - targetHRP.Position).Unit
                    local targetPosition = HumanoidRootPart.Position + direction * escapeDistance
                    local moveDistance = (targetPosition - HumanoidRootPart.Position).Magnitude
                    local tweenTime = moveDistance / escapeSpeed

                    isTweening = true

                    local tween = TweenService:Create(
                        HumanoidRootPart,
                        TweenInfo.new(tweenTime, Enum.EasingStyle.Linear),
                        {CFrame = CFrame.new(targetPosition)}
                    )
                    tween:Play()

                    tween.Completed:Connect(function()
                        isTweening = false
                    end)

                    break 
                end
            end
        end
    end
end)


local Section = MiscTab:AddSection({
	Name = "Player"
})

-- // SpeedHack \\ --

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local SpeedhackEnabled = false
local SpeedMultiplier = 1.3 -- default 1.3x

MiscTab:AddLabel("Press T to toggle Speedhack")

local speedToggle = MiscTab:AddToggle({
    Name = "Toggle Speedhack",
    Default = false,
    Callback = function(Value)
        SpeedhackEnabled = Value
        OrionLib:MakeNotification({
            Name = "Speedhack",
            Content = SpeedhackEnabled and "Speedhack enabled" or "Speedhack disabled",
            Duration = 3,
            Image = "rbxassetid://4483345998"
        })
    end
})

local speedSlider = MiscTab:AddSlider({
    Name = "Speed Multiplier",
    Min = 1,
    Max = 1.3,
    Default = SpeedMultiplier,
    Increment = 0.05,
    ValueName = "x",
    Callback = function(Value)
        SpeedMultiplier = Value
    end
})

local function getMoveDirection()
    local moveDir = Humanoid.MoveDirection
    if moveDir.Magnitude > 0 then
        return moveDir.Unit
    end
    return nil
end

-- // T to toggle \\ --
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.T then
        SpeedhackEnabled = not SpeedhackEnabled
        speedToggle:Set(SpeedhackEnabled)
    end
end)

-- // Movement \\ --
RunService.RenderStepped:Connect(function(dt)
    if SpeedhackEnabled and Humanoid.MoveDirection.Magnitude > 0 then
        local moveDir = getMoveDirection()
        if moveDir then
            local speed = Humanoid.WalkSpeed * (SpeedMultiplier - 1)
            HRP.CFrame = HRP.CFrame + (moveDir * speed * dt)
        end
    end
end)

-- Auto-Fix on Respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HRP = char:WaitForChild("HumanoidRootPart")
    Humanoid = char:WaitForChild("Humanoid")
end)


-- // Self Revive \\ --

local function IsKnocked()
    local char = LocalPlayer.Character
    if not char then return true end
    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return true end
    return humanoid.Health < 25
end

local function teleportIntoCar()
    local vehicle = workspace:FindFirstChild("Vehicles") and workspace.Vehicles:FindFirstChild(LocalPlayer.Name)
    local char = LocalPlayer.Character
    if not vehicle or not char then return end

    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not humanoid or not hrp or not driveSeat then return end

    hrp.CFrame = driveSeat.CFrame + Vector3.new(0, 3, 0)
    wait(0.2)
    driveSeat:Sit(humanoid)
end

local function teleportOutOfCar()
    local char = LocalPlayer.Character
    if not char then return end

    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    if not humanoid then return end

    humanoid.Sit = false
end

local function teleportOnBed()
    local bedSeat = workspace.Buildings and workspace.Buildings:FindFirstChild("Hospital")
        and workspace.Buildings.Hospital:FindFirstChild("HospitalBed")
        and workspace.Buildings.Hospital.HospitalBed:FindFirstChild("Seat")
    local char = LocalPlayer.Character
    if not bedSeat or not char then return end

    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not humanoid or not hrp then return end

    hrp.CFrame = bedSeat.CFrame + Vector3.new(0, 3, 0)
    wait(0.2)

    if humanoid.SeatPart ~= bedSeat then
        bedSeat:Sit(humanoid)
        wait(0.3)
    end
end

local function noclipModel(model, state)
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not state
        end
    end
end

local function moveVehicle(vehicle, targetCFrame, speed, onArrived)
    if not vehicle.PrimaryPart then
        vehicle.PrimaryPart = vehicle:FindFirstChild("Primary") or vehicle:FindFirstChildWhichIsA("BasePart")
    end

    local connection
    connection = RunService.Stepped:Connect(function(_, dt)
        if not vehicle.PrimaryPart then
            connection:Disconnect()
            return
        end

        local currentPos = vehicle.PrimaryPart.Position
        local targetPos = targetCFrame.Position

        noclipModel(vehicle, true)

        local delta = targetPos - currentPos

        if delta.Magnitude < 1 then
            noclipModel(vehicle, false)
            connection:Disconnect()
            if onArrived then
                onArrived()
            end
            return
        end

        local move = delta.Unit * speed * dt

        if move.Magnitude > delta.Magnitude then
            move = delta
        end

        vehicle:SetPrimaryPartCFrame(vehicle.PrimaryPart.CFrame + move)

        for _, part in ipairs(vehicle:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Velocity = Vector3.zero
                part.RotVelocity = Vector3.zero
            end
        end
    end)
end

MiscTab:AddButton({
    Name = "Self revive",
    Callback = function()
        if IsKnocked() then
            local char = LocalPlayer.Character
            if not char then return end
            local humanoid = char:FindFirstChildWhichIsA("Humanoid")
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if not humanoid or not hrp then return end

            local vehicle = workspace:FindFirstChild("Vehicles") and workspace.Vehicles:FindFirstChild(LocalPlayer.Name)
            if not vehicle then return end

            local speed = 200
            local hospitalCFrame = CFrame.new(-84, 5.6, 1109.3)
            local startPos = hrp.CFrame

            teleportIntoCar()
            wait(0.5)

            moveVehicle(vehicle, hospitalCFrame, speed, function()
                teleportOutOfCar()
                wait(0.3)

                teleportOnBed()

                -- Warte bis HP = 100
                repeat
                    task.wait(0.2)
                until humanoid and humanoid.Health >= 100

                humanoid.Sit = false
                wait(0.3)

                teleportIntoCar()
                wait(0.3)

                moveVehicle(vehicle, startPos, speed, function()
                    wait(0.3)
                    teleportIntoCar()
                end)
            end)
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "Quantum",
                Text = "You are not dead",
                Duration = 5
            })
        end
    end
})

MiscTab:AddLabel("losing your stuff if resetting character")
MiscTab:AddButton({
	Name = "Reset Character",
	Callback = function()
        local player = game.Players.LocalPlayer
        if player.Character then
            player.Character:BreakJoints()
            wait(0.1)
            player.Character:Destroy()
        end
        game.StarterGui:SetCore("SendNotification", {
            Title = "Quantum",
            Text = "Character reset successfully",
            Duration = 5
        })
  	end    
})

local function SetNoclipMode(character, enable)
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not enable
        end
    end
end

MiscTab:AddToggle({
	Name = "Noclip",
	Default = false,
	Callback = function(Value)
 noclipEnabled = Value
        local character = player.Character or player.CharacterAdded:Wait()
        
        if Value then
            SetNoclipMode(character, true)
            noclipConnection = RunService.Stepped:Connect(function()
                if noclipEnabled and character then
                    SetNoclipMode(character, true)
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
            end
            SetNoclipMode(character, false)
        end
	end    
})

player.CharacterAdded:Connect(function(newChar)
    character = newChar
    if noclipEnabled then
        SetNoclipMode(true)
    end
end)

MiscTab:AddToggle({
	Name = "Anti-Death",
	Default = false,
	Callback = function(Value)
        local env = getfenv()
        if Value then
            env.downed = true
            env.antichanged1 = player.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
                player.Character.Humanoid.Health = 100
            end)
        else
            if env.antichanged1 then
                env.antichanged1:Disconnect()
                env.antichanged1 = nil
            end
            env.downed = false
        end
	end    
})

MiscTab:AddToggle({
	Name = "Anti-Fall",
	Default = false,
	Callback = function(Value)
        if Value then
            getfenv().ANTIFALL = true
            getfenv().nofall = game:GetService("RunService").RenderStepped:Connect(function()
                local character = game.Players.LocalPlayer.Character
                if character then
                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                    if rootPart then
                        local raycastParams = RaycastParams.new()
                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                        raycastParams.FilterDescendantsInstances = {character}

                        local ray = workspace:Raycast(rootPart.Position, Vector3.new(0, -8, 0), raycastParams)
                        if ray and rootPart.Velocity.Y < -50 then
                            rootPart.Velocity = Vector3.new(0, 0, 0)
                        end
                    end
                end
            end)
        else
            getfenv().ANTIFALL = false
            if getfenv().nofall then
                getfenv().nofall:Disconnect()
                getfenv().nofall = nil
            end
        end
	end    
})

MiscTab:AddButton({
    Name = "Free 100k Cash [OP]",
    Callback = function()
        LocalPlayer:Kick("You have been banned from this experience permanently for using exploits.")
    end
})

MiscTab:AddButton({
	Name = "Infinite Stamina (works on good executors)",
	Callback = function()
if getfenv().firsttime == nil then
            getfenv().firsttime = true

            local func
            for i, v in pairs(getgc(true)) do
                if type(v) == "function" and debug.getinfo(v).name == "setStamina" then
                    func = v
                    break
                end
            end

            if func then
                local old = hookfunction(func, function(...)
                    local args = {...}
                    return args[1], math.huge
                end)
            end
        end 
  	end    
})


-- // Info Tab \\ --

local function getBankStatus()
    local bankLightGreen = workspace:FindFirstChild("Robberies") 
        and workspace.Robberies:FindFirstChild("BankRobbery") 
        and workspace.Robberies.BankRobbery:FindFirstChild("LightGreen") 
        and workspace.Robberies.BankRobbery.LightGreen:FindFirstChild("Light")

    local bankLightRed = workspace:FindFirstChild("Robberies") 
        and workspace.Robberies:FindFirstChild("BankRobbery") 
        and workspace.Robberies.BankRobbery:FindFirstChild("LightRed") 
        and workspace.Robberies.BankRobbery.LightRed:FindFirstChild("Light")

    if bankLightGreen and bankLightRed then
        if bankLightGreen.Enabled == true and bankLightRed.Enabled == false then
            return "Open"
        else
            return "Closed"
        end
    else
        return "Unknown"
    end
end

local function getClubStatus()
    local musikPart = workspace:FindFirstChild("Robberies")
        and workspace.Robberies:FindFirstChild("Club Robbery")
        and workspace.Robberies["Club Robbery"]:FindFirstChild("Club")
        and workspace.Robberies["Club Robbery"].Club:FindFirstChild("Door")
        and workspace.Robberies["Club Robbery"].Club.Door:FindFirstChild("Accessory")
        and workspace.Robberies["Club Robbery"].Club.Door.Accessory:FindFirstChild("Black")

    if musikPart then
        if musikPart.Transparency < 1 then
            return "Open"
        else
            return "Closed"
        end
    else
        return "Unknown"
    end
end

local currentPlayersLabel = InfoTab:AddLabel("Current Players: 0")
local policeLabel = InfoTab:AddLabel("Police: 0")
local fireDeptLabel = InfoTab:AddLabel("Fire Department: 0")
local adacLabel = InfoTab:AddLabel("ADAC: 0")
local bankLabel = InfoTab:AddLabel("Bank: Unknown")
local clubLabel = InfoTab:AddLabel("Club: Unknown")

local function equalsIgnoreCase(str1, str2)
    return string.lower(str1 or "") == string.lower(str2 or "")
end

local function getPlayerJob(player)
    if player.Team and player.Team.Name ~= "" then
        return player.Team.Name
    end

    local jobAttr = player:GetAttribute("Job")
    if jobAttr and jobAttr ~= "" then
        return jobAttr
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local jobStat = leaderstats:FindFirstChild("Job")
        if jobStat and jobStat.Value ~= "" then
            return jobStat.Value
        end
    end

    return nil
end

spawn(function()
    while true do
        local allPlayers = Players:GetPlayers()
        local policeCount = 0
        local fireCount = 0
        local adacCount = 0

        for _, player in pairs(allPlayers) do
            local jobName = getPlayerJob(player)
            if jobName then
                if equalsIgnoreCase(jobName, "Police") then
                    policeCount = policeCount + 1
                elseif equalsIgnoreCase(jobName, "FireDepartment") then
                    fireCount = fireCount + 1
                elseif equalsIgnoreCase(jobName, "ADAC") then
                    adacCount = adacCount + 1
                end
            end
        end

        currentPlayersLabel:Set("Current Players: "..#allPlayers)
        policeLabel:Set("Police: "..policeCount)
        fireDeptLabel:Set("Fire Department: "..fireCount) -- Anzeige mit Leerzeichen
        adacLabel:Set("ADAC: "..adacCount)
        bankLabel:Set("Bank: "..getBankStatus())
        clubLabel:Set("Club: "..getClubStatus())

        wait(1)
    end
end)

end
